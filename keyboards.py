"""This file store all keyboards"""


import random
from aiogram.utils import callback_data
from aiogram.utils.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, callback_query
from config import admin_ids
from loader import dp

# Start bot
letsgo_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü–æ–µ—Ö–∞–ª–∏ üöÄ", callback_data="step1")
        ]
    ]
)

# Confirm correct questionnaire
bio_is_correct = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–í—Å–µ –≤–µ—Ä–Ω–æ üëç", callback_data="bio_is_ok"),
            InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='rewrite_anketa')
        ]
    ]
)

# Set gender
bio_gender = InlineKeyboardMarkup(row_width=1,
                                  inline_keyboard=[
                                      [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π üôã‚Äç‚ôÇÔ∏è", callback_data="male")],
                                      [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π üôã‚Äç‚ôÄÔ∏è", callback_data="female")]
                                  ]
                                  )

# Choose companion gender
gender_of_companion = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–≥–æ", callback_data="gender_of_companion_male")],
        [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–æ–≥–æ", callback_data="gender_of_companion_female")],
        [InlineKeyboardButton(text="–ù–µ –≤–∞–∂–Ω–æ", callback_data="gender_of_companion_both")]
    ]
)

# Profile menu
profile_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚úçÔ∏è", callback_data="change_my_profile")],
        [InlineKeyboardButton(text="–í—Å–µ –≤–µ—Ä–Ω–æ üëç", callback_data="menu")]
    ]
)

# Profile menu changes
change_profile = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ò–º—è", callback_data="change_profile_name")],
        [InlineKeyboardButton(text="–ü–æ–ª", callback_data="change_profile_gender")],
        [InlineKeyboardButton(text="–í–æ–∑—Ä–∞—Å—Ç", callback_data="change_profile_age")],
        [InlineKeyboardButton(text="–ò–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="change_profile_hobby")],
        [InlineKeyboardButton(text="–ü–æ–∂–µ–ª–∞–Ω–∏—è –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É", callback_data="change_profile_compreq")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
    ]
)

# Profile submenu
profile_submenu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="change_my_profile")],
        [InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
    ]
)

# Help menu
help_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç—Ä–∞–Ω–Ω–æ/–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ü§ñ", callback_data="bot_bug")],
        [InlineKeyboardButton(text="–ù–µ –º–æ–≥—É —Å —á–µ–º-—Ç–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è üßê", callback_data="need_help")],
        [InlineKeyboardButton(text="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üöî", callback_data="need_help")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="need_help")],
    ]
)

# Choose task 1
choose_task1 = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –õ–µ–≥–∫–∏–µ", callback_data="easy_tasks")],
        [InlineKeyboardButton(text="‚ùå –°—Ä–µ–¥–Ω–∏–µ", callback_data="medium_tasks_deny")],
        [InlineKeyboardButton(text="‚ùå –°–ª–æ–∂–Ω—ã–µ", callback_data="hard_tasks_deny")]
    ]
)

# Choose task 2
choose_task2 = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –õ–µ–≥–∫–∏–µ", callback_data="easy_tasks")],
        [InlineKeyboardButton(text="‚úÖ –°—Ä–µ–¥–Ω–∏–µ", callback_data="medium_tasks")],
        [InlineKeyboardButton(text="‚ùå –°–ª–æ–∂–Ω—ã–µ", callback_data="hard_tasks_deny")]
    ]
)

# Choose task 3
choose_task3 = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –õ–µ–≥–∫–∏–µ", callback_data="easy_tasks")],
        [InlineKeyboardButton(text="‚úÖ –°—Ä–µ–¥–Ω–∏–µ", callback_data="medium_tasks")],
        [InlineKeyboardButton(text="‚úÖ –°–ª–æ–∂–Ω—ã–µ", callback_data="hard_tasks")]
    ]
)

# Send easy task
send_easy_task = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="get_easy_task")]
    ]
)


# Send medium task
send_medium_task = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="get_medium_task")]
    ]
)

# Send hard task
send_hard_task = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="get_hard_task")]
    ]
)
support_callback = CallbackData("ask_support", "messages", "user_id", "as_user")
cancel_support_callback = CallbackData("cancel_support", "user_id")

# Did you test companion
contact_check = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —Å–ø–∏—Å–∞–ª–∏—Å—å", callback_data="contact_was")],
        [InlineKeyboardButton(text="–ü–æ–∫–∞ –Ω–µ—Ç", callback_data="contact_was_not")]
    ]
)

# Did the meeting agreed
agreed_meeting_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å", callback_data="meeting_agreed")],
        [InlineKeyboardButton(text="–£–∂–µ –ø—Ä–æ–≤–µ–ª–∏", callback_data="meeting_done")]
    ]
)

# Meeting is not agreed
not_agreed_meeting_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ù–µ –ø—ã—Ç–∞–ª—Å—è(-–∞—Å—å)", callback_data="did_not_tried_to_agree_meeting")],
        [InlineKeyboardButton(text="–ú–Ω–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏", callback_data="did_not_recieve_answer_to_agree_meeting")]
    ]
)

good_or_bad_meeting = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–•–æ—Ä–æ—à–æ üëç", callback_data="meeting_was_good")],
        [InlineKeyboardButton(text="–ü–ª–æ—Ö–æ üëé", callback_data="meeting_was_bad")]
    ]
)

do_participate_next_time = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞!", callback_data="participate_next_time")],
        [InlineKeyboardButton(text="–ü–æ–∫–∞ –Ω–µ—Ç", callback_data="not_participate_next_time")]
    ]
)

do_another_meeting = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞!", callback_data="participate_next_time")],
        [InlineKeyboardButton(text="–ü–æ–∫–∞ –Ω–µ—Ç", callback_data="not_participate_next_time")]
    ]
)

why_did_not_try = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–°—Ç—Ä–∞—à–Ω–æ/–ù–µ–∫–æ–º—Ñ–æ—Ç–Ω–æ", callback_data="fear")],
        [InlineKeyboardButton(text="–ù–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –±–æ—Ç–µ", callback_data="do_not_need_bot")],
        [InlineKeyboardButton(text="–ù–µ —Ö–æ—á—É –ø–∏—Å–∞—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–º—É –Ω–∞–ø–∞—Ä–Ω–∏–∫—É", callback_data="do_not_like_partner")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="another_reason")]
    ]
)

do_change_partner = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, –¥–∞–≤–∞–π—Ç–µ –ø–æ–º–µ–Ω—è–µ–º", callback_data="change_partner")],
        [InlineKeyboardButton(text="–°–ø–∞—Å–∏–±–æ, –Ω–µ –Ω–∞–¥–æ", callback_data="do_not_change_partner")]
    ]
)

another_reason_details = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–Ø –≤—Å–µ —Ç–∞–∫–∏ –Ω–∞–ø–∏—à—É —Å–≤–æ–µ–º—É –Ω–∞–ø–∞—Ä–Ω–∏–∫—É", callback_data="do_not_change_partner")],
        [InlineKeyboardButton(text="–ü–æ–º–µ–Ω—è–π—Ç–µ –º–Ω–µ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞", callback_data="change_partner")],
        [InlineKeyboardButton(text="–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", callback_data="not_participate_next_time")]
    ]
)


# Support service functions
async def check_support_available(support_id):
    state = dp.current_state(chat=support_id, user=support_id)
    state_str = str(
        await state.get_state()
    )
    if state_str == "in_support":
        return
    else:
        return support_id


async def get_support_manager():
    random.shuffle(admin_ids)
    for support_id in admin_ids:
        # –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –∑–∞–Ω—è—Ç
        support_id = await check_support_available(support_id)

        # –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–∞—à–ª–∏, —á—Ç–æ –≤—ã–≤–æ–¥–∏–º
        if support_id:
            return support_id
    else:
        return


async def support_keyboard(messages, user_id=None):
    if user_id:
        # If the second ID is specified, then this button is for the operator

        contact_id = int(user_id)
        as_user = "no"
        text = "–û—Ç–≤–µ—Ç–∏—Ç—å"

    else:
        # If the second ID is not specified, then this button is for the user and you need to select an operator for him

        contact_id = await get_support_manager()
        as_user = "yes"
        if messages == "many" and contact_id is None:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ - –≤—ã—Ö–æ–¥–∏–º –∏ –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ –µ–≥–æ –Ω–µ—Ç
            return False
        elif messages == "one" and contact_id is None:
            contact_id = random.choice(admin_ids)

        if messages == "one":
            text = "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ"
        else:
            text = "–ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(
            text=text,
            callback_data=support_callback.new(
                messages=messages,
                user_id=contact_id,
                as_user=as_user
            )
        )
    )

    if messages == "many":
        # Add a button to end the session if you change your mind about calling support
        keyboard.add(
            InlineKeyboardButton(
                text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∞–Ω—Å",
                callback_data=cancel_support_callback.new(
                    user_id=contact_id
                )
            )
        )
    return keyboard


def cancel_support(user_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∞–Ω—Å",
                    callback_data=cancel_support_callback.new(
                        user_id=user_id
                    )
                )
            ]
        ]
    )
