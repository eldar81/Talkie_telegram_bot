"""Handlers for initial questionnaire"""


from datetime import datetime
import logging
import sqlite3
import re

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import Message, CallbackQuery

from keyboards import letsgo_button, bio_is_correct, bio_gender, gender_of_companion
from loader import dp, db
from FMS import Ankena


@dp.message_handler(Command("start"))
async def send_welcome(message: Message):
    try:
        db.add_user(id=message.from_user.id,
                    name=message.from_user.full_name,
                    nickname=message.from_user.username)
        await message.answer(text="–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç Talkie. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–æ–∫–∞—á–∞—Ç—å –Ω–∞–≤—ã–∫ –æ–±—â–µ–Ω–∏—è  üòÉ",
                             reply_markup=letsgo_button)
    except sqlite3.IntegrityError as err:
        print(err)
        await message.answer(text="–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞\n"
                                  "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç—Å—è –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '/'")


@dp.callback_query_handler(text='step1')
async def start_step_0(call: CallbackQuery):
    await call.answer(cache_time=5)
    callback_data = call.data
    logging.info(f"call = {callback_data}")
    await call.message.answer("ü§ñ –ó–¥–æ—Ä–æ–≤–æ! –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É\n\n",
                              disable_notification=True)
    await call.message.answer("‚ùî–í–æ–ø—Ä–æ—Å 1/5\n\n"
                              "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
                              disable_notification=True)
    await call.message.edit_reply_markup()
    await Ankena.Name.set()


@dp.callback_query_handler(text='rewrite_anketa')
async def start_step_0(call: CallbackQuery):
    await call.answer(cache_time=5)
    callback_data = call.data
    logging.info(f"call = {callback_data}")
    await call.message.answer("‚ùî–í–æ–ø—Ä–æ—Å 1/5\n\n"
                              "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
                              disable_notification=True)
    await call.message.edit_reply_markup()
    await Ankena.Name.set()


# @dp.callback_query_handler(text='step1')
# async def start_step_1(call: CallbackQuery):
#     await call.answer(cache_time=5)
#     callback_data = call.data
#     logging.info(f"call = {callback_data}")
#     await call.message.answer("–ó–¥–æ—Ä–æ–≤–æ! –ß—Ç–æ–±—ã —è —Å–º–æ–≥ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∑–∞–ø–æ–ª–Ω–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É\n\n"
#                               "‚ùî–í–æ–ø—Ä–æ—Å 1/5\n\n"
#                               "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
#                               disable_notification=True)
#     await call.message.edit_reply_markup()
#     await Ankena.Name.set()


@dp.message_handler(state=Ankena.Name)
async def start_step_2(message: Message, state: FSMContext):
    answer = message.text
    if re.match(r'/', answer):
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –¥–æ –∫–æ–Ω—Ü–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ü§ñ\n\n"
                                  "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
                             disable_notification=True)
        await Ankena.Name.set()
    else:
        db.update_user_name(id=message.from_user.id,
                            Bio_name=answer)
        await state.update_data({"bio_name": answer})
        await message.answer(text="‚ùî2/5\n\n"
                                  "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
                             disable_notification=True)
        await Ankena.Age.set()



@dp.message_handler(state=Ankena.Age)
async def start_step_3(message: Message, state: FSMContext):
    answer = message.text
    if re.match(r'/', answer):
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –¥–æ –∫–æ–Ω—Ü–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ü§ñ\n\n"
                                  "‚ùî–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
                                  "<i>22</i>",
                             disable_notification=True)
        await Ankena.Age.set()
    elif re.match(r'[1-9]{1}[0-9]{1}', answer) and len(answer) == 2:
        db.update_user_age(id=message.from_user.id,
                           Bio_age=int(answer))
        await state.update_data({"bio_age": int(answer)})
        await message.answer(text="‚ùî3/5\n\n"
                              "–¢–≤–æ–π –ø–æ–ª?",
                         reply_markup=bio_gender,
                         disable_notification=True
                         )
        await Ankena.Gender.set()
    else:
        await message.answer(text="‚ùî–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
                                  "<i>22</i>",
                             disable_notification=True)
        await Ankena.Age.set()





@dp.callback_query_handler(state=Ankena.Gender)
async def start_step_4(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=5)
    callback_data = call.data
    logging.info(f"call = {callback_data}")
    answer_to_db = 0
    if callback_data == "male":
     answer_to_db = 1
    db.update_user_gender(id=call.from_user.id,
                          Bio_gender=answer_to_db)
    await state.update_data({"bio_gender": answer_to_db})
    await call.message.answer(text="‚ùî4/5\n\n"
                                   "–†–∞—Å—Å–∫–∞–∂–∏, —á–µ–º —Ç—ã —É–≤–ª–µ–∫–∞–µ—à—å—Å—è. –ü–µ—Ä–µ—á–∏—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
                                   "<i>–§–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ, —à–∞—Ö–º–∞—Ç—ã, –∫–∞—Ä—Ç–∏–Ω—ã –ø–æ –Ω–æ–º–µ—Ä–∞–º</i>",
                              disable_notification=True)
    await Ankena.Hobby.set()
    await call.message.edit_reply_markup()


@dp.message_handler(state=Ankena.Hobby)
async def start_step_5(message: Message, state: FSMContext):
    answer = message.text
    if re.match(r'/', answer):
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –¥–æ –∫–æ–Ω—Ü–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ü§ñ\n\n"
                                  "‚ùî4/5\n\n"
                                   "–†–∞—Å—Å–∫–∞–∂–∏, —á–µ–º —Ç—ã —É–≤–ª–µ–∫–∞–µ—à—å—Å—è. –ü–µ—Ä–µ—á–∏—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
                                   "<i>–§–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ, —à–∞—Ö–º–∞—Ç—ã, –∫–∞—Ä—Ç–∏–Ω—ã –ø–æ –Ω–æ–º–µ—Ä–∞–º</i>",
                             disable_notification=True)
        await Ankena.Hobby.set()
    else:
        db.update_user_hobby(id=message.from_user.id,
                             Bio_hobby=answer)
        await state.update_data({"bio_hobby": answer})
        await message.answer("‚ùî5/5\n\n"
                             "–°–∫–∞–∂–∏, –∫–∞–∫–æ–≥–æ –ø–æ–ª–∞ –Ω–∞–º –Ω–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?",
                                  reply_markup=gender_of_companion,
                                  disable_notification=True)
        await Ankena.Comp_req.set()



@dp.callback_query_handler(state=Ankena.Comp_req)
async def start_step_6(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=5)
    data = await state.get_data()
    bio_name = data.get("bio_name")
    bio_age = data.get("bio_age")
    bio_gender = data.get("bio_gender")
    bio_hobby = data.get("bio_hobby")
    callback_data = call.data
    logging.info(f"call = {callback_data}")
    answer = 2
    if callback_data == "gender_of_companion_male":
        answer = 1
    elif callback_data == "gender_of_companion_female":
        answer = 0
    bio_gender_letters = "–ñ–µ–Ω—Å–∫–∏–π"
    bio_req_letters = "–ù–µ—Ç"
    if bio_gender == 1:
        bio_gender_letters = "–ú—É–∂—Å–∫–æ–π"
    if answer == 1:
        bio_req_letters = "–¢–æ–ª—å–∫–æ –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞"
    elif answer == 0:
        bio_req_letters = "–¢–æ–ª—å–∫–æ –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞"
    db.update_user_compreq(id=call.from_user.id,
                           Bio_companion_requirements=answer)
    await state.update_data({"bio_companion_requirements": answer})
    await call.message.answer(text=f"–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É\n\n"
                              f"<strong>–ò–º—è:</strong> {bio_name}\n"
                              f"<strong>–í–æ–∑—Ä–∞—Å—Ç:</strong> {bio_age}\n"
                              f"<strong>–ü–æ–ª:</strong> {bio_gender_letters}\n"
                              f"<strong>–ò–Ω—Ç–µ—Ä–µ—Å—ã:</strong> {bio_hobby}\n"
                              f"<strong>–ü–æ–∂–µ–ª–∞–Ω–∏–µ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É:</strong> {bio_req_letters}\n\n"
                              f"–í—Å–µ –≤–µ—Ä–Ω–æ?",
                         reply_markup=bio_is_correct,
                              disable_notification=True)
    await call.message.edit_reply_markup()
    logging.info(await state.get_data())
    await state.reset_state(with_data=False)


@dp.callback_query_handler(text="bio_is_ok")
async def start_step_7(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=5)
    data = await state.get_data()
    try:
        db.update_user_anketa(Bio_name=data.get("bio_name"),
                              Bio_age=data.get("bio_age"),
                              Bio_gender=data.get("bio_gender"),
                              Bio_hobby=data.get("bio_hobby"),
                              Bio_companion_requirements=data.get("bio_companion_requirements"),
                              id=call.from_user.id)
    except sqlite3.IntegrityError as err:
        print(err)
    print(db.select_all_users())

    tt = 16 * 60 + 29
    h = datetime.utcnow().time().hour
    m = datetime.utcnow().time().minute
    ts = h * 60 + m
    if ts > tt:
        await call.message.answer(text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤(-–∞) –∫ –Ω–∞—á–∞–ª—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ Talie ü•≥\n\n"
                                       "–ü–∞—Ä—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:30 –ø–æ –ú–°–ö. "
                                       "–ó–∞–≤—Ç—Ä–∞ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –ø–µ—Ä–≤—É—é –ø–∞—Ä—É.\n\n"
                                       "–£ Talkie –µ—Å—Ç—å <a href='https://letstalkie.ru/library'>–ë–∞–∑–∞ –ó–Ω–∞–Ω–∏–π</a> –æ–± –æ–±—â–µ–Ω–∏–∏. "
                                       "–¢–∞–º –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ üòä\n\n"
                                       "–¢–∞–∫–∂–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –Ω–µ–±–æ–ª—å—à—É—é <a href='https://telegra.ph/Kak-provesti-pervuyu-vstrechu-v-Talkie-08-23'>–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</a> –∫ –ø–µ—Ä–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏. "
                                       "–û–Ω–∞ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ üòâ",
                                  disable_notification=True)
    else:

        await call.message.answer(text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤(-–∞) –∫ –Ω–∞—á–∞–ª—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ Talie ü•≥\n\n"
                                   "–ü–∞—Ä—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:30 –ø–æ –ú–°–ö. "
                                   "–î–æ–∂–¥–∏—Å—å —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –∞–Ω–∫–µ—Ç—É —Ç–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞.\n\n"
                                   "–£ Talkie –µ—Å—Ç—å <a href='https://letstalkie.ru/library'>–ë–∞–∑–∞ –ó–Ω–∞–Ω–∏–π</a> –æ–± –æ–±—â–µ–Ω–∏–∏. "
                                   "–¢–∞–º –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ üòä\n\n"
                                   "–¢–∞–∫–∂–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –Ω–µ–±–æ–ª—å—à—É—é <a href='https://telegra.ph/Kak-provesti-pervuyu-vstrechu-v-Talkie-08-23'>–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</a> –∫ –ø–µ—Ä–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏. "
                                   "–û–Ω–∞ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ üòâ",
                              disable_notification=True)
    await call.message.edit_reply_markup()
    await state.finish()

# @dp.callback_query_handler(text="bio_is_ok")
# async def start_step_7(call: CallbackQuery, state: FSMContext):
#     await call.answer(cache_time=5)
#     tt = 16 * 60 + 29
#     h = datetime.utcnow().time().hour
#     m = datetime.utcnow().time().minute
#     ts = h * 60 + m
#     if ts > tt:
#         await call.message.answer(text="–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º Talkie ü•≥\n\n"
#                                        "–í—ã–±–µ—Ä–∏, —á–µ–º –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –∑–∞–Ω—è—Ç—å—Å—è:",
#                                   reply_markup=choose_activity,
#                                   disable_notification=True)
#     else:
#
#         await call.message.answer(text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤(-–∞) –∫ –Ω–∞—á–∞–ª—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ Talie ü•≥\n\n"
#                                    "–ü–∞—Ä—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:30 –ø–æ –ú–°–ö. "
#                                    "–î–æ–∂–¥–∏—Å—å —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –∞–Ω–∫–µ—Ç—É —Ç–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞.\n\n"
#                                    "–£ Talkie –µ—Å—Ç—å <a href='https://letstalkie.ru/library'>–ë–∞–∑–∞ –ó–Ω–∞–Ω–∏–π</a> –æ–± –æ–±—â–µ–Ω–∏–∏. "
#                                    "–¢–∞–º –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ üòä\n\n"
#                                    "–¢–∞–∫–∂–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –Ω–µ–±–æ–ª—å—à—É—é <a href='https://telegra.ph/Kak-provesti-pervuyu-vstrechu-v-Talkie-08-23'>–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</a> –∫ –ø–µ—Ä–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏. "
#                                    "–û–Ω–∞ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ üòâ",
#                               disable_notification=True)
#     await call.message.edit_reply_markup()
#     await state.finish()