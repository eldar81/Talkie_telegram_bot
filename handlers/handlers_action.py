""""Send everyday notifications to user who are not in pairs"""

import asyncio

from aiogram import Dispatcher
from datetime import date

from config import admin_id
from handlers.handlers_after_match import was_contact_asking
from keyboards import choose_task1, choose_task2, choose_task3
from loader import scheduler, dp, db
from algorithm import transfer_users, generate_lists_of_matches, choose_match, transfer_matches


async def no_pair_notification(dp: Dispatcher):
    todaydate = int(str(date.today()).replace("-", ""))
    gen_matches = db.select_all_gen_matches()
    for i in gen_matches:
        if i[8] is None and i[2] == todaydate:
            await dp.bot.send_message(i[1],
                                      "–ò —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç! üëã –ú—ã –Ω–∞—á–∞–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–∞—Ä—ã.\n\n"
                                      "–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –ø—Ä–∏—à–ª—é –∞–Ω–∫–µ—Ç—É —Ç–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")


async def no_pairs_admin_notification(dp: Dispatcher):
    todaydate = int(str(date.today()).replace("-", ""))
    gen_matches = db.select_all_gen_matches()
    print(gen_matches)
    c = 0
    list_no_matches = []
    list_no_matches_with_links = []
    for i in gen_matches:
        if i[8] is None and i[2] == todaydate:
            print(f"Start working with: {i[1]}")
            c += 1
            list_no_matches.append(i[1])
    print(list_no_matches)
    for i in list_no_matches:
        i = "<a href='tg://user?id=" + str(i) + "'>üòß</a>"
        list_no_matches_with_links.append(i)
    list_no_matches_with_links = str(list_no_matches_with_links)[1:-1]
    print(list_no_matches_with_links)
    await dp.bot.send_message(admin_id,
                              f"–°–µ–≥–æ–¥–Ω—è <b>{c}</b> —á–µ–ª–æ–≤–µ–∫ –±–µ–∑ –ø–∞—Ä—ã\n\n"
                              f"–í–æ—Ç —Å–ø–∏—Å–æ–∫: {list_no_matches_with_links}"
                              )



async def send_pairs(dp: Dispatcher):
    todaydate = int(str(date.today()).replace("-", ""))
    matches = db.select_all_matches()
    print(matches)
    for i in matches:
        if i[0][-8:] == str(todaydate):
            meetings_done = db.select_user(id=i[1])[15] # –í—ã–±–∏—Ä–∏–±–∞–µ—Ç, –∫–∞–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
            keyboard_task = choose_task1
            if meetings_done == 1:
                keyboard_task = choose_task2
            elif meetings_done > 1:
                keyboard_task = choose_task3
            user_data = db.select_user(id=i[2])
            gender = "–ú—É–∂—Å–∫–æ–π"
            if user_data[3] == 0:
                gender = "–ñ–µ–Ω—Å–∫–∏–π"
            try:
                await dp.bot.send_message(i[1],
                                          f"–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–¥–æ–±—Ä–∞–ª —Ç–µ–±–µ –ø–∞—Ä—É –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –≠—Ç–æ <b>{user_data[1]}</b>\n\n"
                                          f"–í–æ—Ç –µ–≥–æ/–µ–µ –∞–Ω–∫–µ—Ç–∞:\n"
                                          f"–í–æ–∑—Ä–∞—Å—Ç: {user_data[4]}\n"
                                          f"–ü–æ–ª: {gender}\n"
                                          f"–ò–Ω—Ç–µ—Ä–µ—Å—ã (—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –±–µ—Å–µ–¥—É): {user_data[5]}\n\n"
                                          f"–ù–∞–ø–∏—à–∏ <a href='tg://user?id={i[2]}'>{user_data[1]}</a> –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Å—å –æ –∑–≤–æ–Ω–∫–µ –≤ Skype –∏–ª–∏ Zoom.\n\n"
                                          f"<i>–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å, –º–æ–∂–µ—à—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ:</i>")
                await dp.bot.send_message(i[1],
                                          "–ü—Ä–∏–≤–µ—Ç!üëã –ù–∞–º –≤—ã–ø–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∞ –≤ Talkie. –î–æ–≥–æ–≤–æ—Ä–∏–º—Å—è –æ —Å–æ–∑–≤–æ–Ω–µ?")
                await dp.bot.send_message(i[1],
                                          "–ê —á—Ç–æ–±—ã –≤—Å—Ç—Ä–µ—á–∞ –ø—Ä–æ—à–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ, –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫ –Ω–µ–π.",
                                          reply_markup=keyboard_task)
                db.set_notification_1(i[1])
                await asyncio.sleep(.05)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i[1]}: {e}")
    for i in matches:
        if i[0][-8:] == str(todaydate):
            meetings_done = db.select_user(id=i[2])[15] # –í—ã–±–∏—Ä–∏–±–∞–µ—Ç, –∫–∞–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
            keyboard_task = choose_task1
            if meetings_done == 1:
                keyboard_task = choose_task2
            elif meetings_done > 1:
                keyboard_task = choose_task3
            user_data = db.select_user(id=i[1])
            gender = "–ú—É–∂—Å–∫–æ–π"
            if user_data[3] == 0:
                gender = "–ñ–µ–Ω—Å–∫–∏–π"
            try:
                await dp.bot.send_message(i[2],
                                          f"–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–¥–æ–±—Ä–∞–ª —Ç–µ–±–µ –ø–∞—Ä—É –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –≠—Ç–æ <b>{user_data[1]}</b>\n\n"
                                          f"–í–æ—Ç –µ–≥–æ/–µ–µ –∞–Ω–∫–µ—Ç–∞:\n"
                                          f"–í–æ–∑—Ä–∞—Å—Ç: {user_data[4]}\n"
                                          f"–ü–æ–ª: {gender}\n"
                                          f"–ò–Ω—Ç–µ—Ä–µ—Å—ã (—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –±–µ—Å–µ–¥—É): {user_data[5]}\n\n"
                                          f"–ù–∞–ø–∏—à–∏ <a href='tg://user?id={i[1]}'>{user_data[1]}</a> –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Å—å –æ –∑–≤–æ–Ω–∫–µ –≤ Skype –∏–ª–∏ Zoom.\n\n"
                                          f"<i>–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å, –º–æ–∂–µ—à—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ:</i>")
                await dp.bot.send_message(i[2],
                                          "–ü—Ä–∏–≤–µ—Ç!üëã –ù–∞–º –≤—ã–ø–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∞ –≤ Talkie. –î–æ–≥–æ–≤–æ—Ä–∏–º—Å—è –æ —Å–æ–∑–≤–æ–Ω–µ?")
                await dp.bot.send_message(i[2],
                                          "–ê —á—Ç–æ–±—ã –≤—Å—Ç—Ä–µ—á–∞ –ø—Ä–æ—à–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ, –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫ –Ω–µ–π.",
                                          reply_markup=keyboard_task)
                db.set_notification_2(i[2])
                await asyncio.sleep(.05)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i[2]}: {e}")


def schedule_jobs(h, m):
    scheduler.add_job(transfer_users, "cron", hour=h, minute=m, second=1)
    scheduler.add_job(generate_lists_of_matches, "cron", hour=h, minute=m, second=2)
    scheduler.add_job(choose_match, "cron", hour=h, minute=m, second=3)
    scheduler.add_job(transfer_matches, "cron", hour=h, minute=m, second=4)
    scheduler.add_job(no_pair_notification, "cron",hour=h, minute=m, second=5, args=(dp,))
    scheduler.add_job(send_pairs, "cron", hour=h, minute=m, second=6, args=(dp,))
    scheduler.add_job(no_pairs_admin_notification, "cron", hour=h, minute=m, second=7, args=(dp,))
    scheduler.add_job(was_contact_asking, "cron", hour=h, minute=m, second=8, args=(dp,))
